// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$bulb-hover-name: 'bulb-hover';
$bulb-hover-x: 94px;
$bulb-hover-y: 0px;
$bulb-hover-offset-x: -94px;
$bulb-hover-offset-y: 0px;
$bulb-hover-width: 13px;
$bulb-hover-height: 21px;
$bulb-hover-total-width: 107px;
$bulb-hover-total-height: 107px;
$bulb-hover-image: '../../dist/images/spritesheet.png';
$bulb-hover: (94px, 0px, -94px, 0px, 13px, 21px, 107px, 107px, '../../dist/images/spritesheet.png', 'bulb-hover', );
$bulb-name: 'bulb';
$bulb-x: 94px;
$bulb-y: 41px;
$bulb-offset-x: -94px;
$bulb-offset-y: -41px;
$bulb-width: 13px;
$bulb-height: 21px;
$bulb-total-width: 107px;
$bulb-total-height: 107px;
$bulb-image: '../../dist/images/spritesheet.png';
$bulb: (94px, 41px, -94px, -41px, 13px, 21px, 107px, 107px, '../../dist/images/spritesheet.png', 'bulb', );
$crosshair-hover-name: 'crosshair-hover';
$crosshair-hover-x: 0px;
$crosshair-hover-y: 44px;
$crosshair-hover-offset-x: 0px;
$crosshair-hover-offset-y: -44px;
$crosshair-hover-width: 24px;
$crosshair-hover-height: 24px;
$crosshair-hover-total-width: 107px;
$crosshair-hover-total-height: 107px;
$crosshair-hover-image: '../../dist/images/spritesheet.png';
$crosshair-hover: (0px, 44px, 0px, -44px, 24px, 24px, 107px, 107px, '../../dist/images/spritesheet.png', 'crosshair-hover', );
$crosshair-name: 'crosshair';
$crosshair-x: 44px;
$crosshair-y: 44px;
$crosshair-offset-x: -44px;
$crosshair-offset-y: -44px;
$crosshair-width: 24px;
$crosshair-height: 24px;
$crosshair-total-width: 107px;
$crosshair-total-height: 107px;
$crosshair-image: '../../dist/images/spritesheet.png';
$crosshair: (44px, 44px, -44px, -44px, 24px, 24px, 107px, 107px, '../../dist/images/spritesheet.png', 'crosshair', );
$user-hover-name: 'user-hover';
$user-hover-x: 0px;
$user-hover-y: 88px;
$user-hover-offset-x: 0px;
$user-hover-offset-y: -88px;
$user-hover-width: 11px;
$user-hover-height: 19px;
$user-hover-total-width: 107px;
$user-hover-total-height: 107px;
$user-hover-image: '../../dist/images/spritesheet.png';
$user-hover: (0px, 88px, 0px, -88px, 11px, 19px, 107px, 107px, '../../dist/images/spritesheet.png', 'user-hover', );
$user-name: 'user';
$user-x: 31px;
$user-y: 88px;
$user-offset-x: -31px;
$user-offset-y: -88px;
$user-width: 11px;
$user-height: 19px;
$user-total-width: 107px;
$user-total-height: 107px;
$user-image: '../../dist/images/spritesheet.png';
$user: (31px, 88px, -31px, -88px, 11px, 19px, 107px, 107px, '../../dist/images/spritesheet.png', 'user', );
$users-hover-name: 'users-hover';
$users-hover-x: 0px;
$users-hover-y: 0px;
$users-hover-offset-x: 0px;
$users-hover-offset-y: 0px;
$users-hover-width: 27px;
$users-hover-height: 24px;
$users-hover-total-width: 107px;
$users-hover-total-height: 107px;
$users-hover-image: '../../dist/images/spritesheet.png';
$users-hover: (0px, 0px, 0px, 0px, 27px, 24px, 107px, 107px, '../../dist/images/spritesheet.png', 'users-hover', );
$users-name: 'users';
$users-x: 47px;
$users-y: 0px;
$users-offset-x: -47px;
$users-offset-y: 0px;
$users-width: 27px;
$users-height: 24px;
$users-total-width: 107px;
$users-total-height: 107px;
$users-image: '../../dist/images/spritesheet.png';
$users: (47px, 0px, -47px, 0px, 27px, 24px, 107px, 107px, '../../dist/images/spritesheet.png', 'users', );
$spritesheet-width: 107px;
$spritesheet-height: 107px;
$spritesheet-image: '../../dist/images/spritesheet.png';
$spritesheet-sprites: ($bulb-hover, $bulb, $crosshair-hover, $crosshair, $user-hover, $user, $users-hover, $users, );
$spritesheet: (107px, 107px, '../../dist/images/spritesheet.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
